{
  "name": "postcss",
  "version": "4.0.4",
  "description": "Tool to transform CSS by JS plugins",
  "keywords": [
    "css",
    "postproccessor",
    "parser",
    "source map",
    "manipulation",
    "preprocess",
    "transform"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss.git"
  },
  "dependencies": {
    "source-map": "~0.2.0",
    "js-base64": "~2.1.7"
  },
  "devDependencies": {
    "concat-with-sourcemaps": "1.0.0",
    "gulp-bench-summary": "0.1.0",
    "gulp-json-editor": "2.2.1",
    "jshint-stylish": "1.0.0",
    "gulp-jshint": "1.9.2",
    "gonzales-pe": "3.0.0-26",
    "gulp-bench": "1.1.0",
    "gulp-mocha": "2.0.0",
    "node-sass": "2.0.1",
    "gulp-util": "3.0.3",
    "gulp-6to5": "3.0.0",
    "execSync": "1.0.2",
    "fs-extra": "0.16.3",
    "gonzales": "1.0.7",
    "through2": "0.6.3",
    "stylecow": "4.2.4",
    "request": "2.53.0",
    "cssnext": "1.0.0",
    "rework": "1.0.1",
    "mensch": "0.3.1",
    "stylus": "0.50.0",
    "mocha": "2.1.0",
    "cssom": "0.3.0",
    "gulp": "3.8.11",
    "less": "2.4.0",
    "chai": "2.0.0",
    "6to5": "3.6.4"
  },
  "scripts": {
    "test": "gulp"
  },
  "main": "lib/postcss",
  "readme": "# PostCSS [![Build Status](https://travis-ci.org/postcss/postcss.svg)](https://travis-ci.org/postcss/postcss) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/postcss/postcss?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<img align=\"right\" width=\"95\" height=\"95\" src=\"http://postcss.github.io/postcss/logo.svg\" title=\"Philosopher’s stone, logo of PostCSS\">\n\nPostCSS is a tool to transform CSS by JS plugins. This plugins can add vendor\nprefixes, polyfill CSS 4 features, inline images, add variables\nand mixins support. PostCSS with most popular [Autoprefixer] plugin\nis used by Google, Twitter, Alibaba and Shopify.\n\nPostCSS does same work as Sass, LESS or Stylus. But, instead of preprocessors,\nPostCSS is modular, 4—40 times faster and much powerful\n(Autoprefixer is impossible on preprocessors).\n\nPostCSS is very small. It contains only CSS parser, CSS node tree API,\nsource map generator and node tree stringifier. All features (like variables\nor nesting) are made by plugins. PostCSS plugin is just a JS function, that\naccepts CSS node tree, reads and transforms some of nodes in tree.\n\nFor example, with [Autoprefixer], [cssnext], [CSS Grace],\n[postcss-nested], [postcss-mixins] and [postcss-easings] plugins\nyou will be able to write this CSS:\n\n```css\n@define-mixin social-icon $color {\n    & {\n        background: $color;\n        &:hover {\n            background: color($color whiteness(+10%))\n        }\n    }\n}\n\n.social-icon {\n    transition: background 200ms ease-in-sine;\n    font-variant-caps: small-caps;\n    &.is-twitter {\n        @mixin social-icon #55acee;\n    }\n    &.is-facebook {\n        @mixin social-icon #3b5998;\n    }\n    &:active {\n        opacity: 0.6;\n    }\n}\n\n@custom-media --mobile (width <= 640px);\n\n@custom-selector --heading h1, h2, h3, h4, h5, h6;\n\n.post-article --heading {\n    margin-top: 10rem;\n    @media (--mobile) {\n        margin-top: 0;\n    }\n}\n```\n\nTwitter account for articles, releases and new plugins: [@postcss].\nWeibo account: [postcss].\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[Autoprefixer]: https://github.com/postcss/autoprefixer\n[CSS Grace]:    https://github.com/cssdream/cssgrace\n[@postcss]:     https://twitter.com/postcss\n[postcss]:      http://weibo.com/postcss\n[cssnext]:      https://github.com/cssnext/cssnext\n\n## Differences with preprocessors\n\n1. With preprocessors you write your CSS on special programming language.\n   It is like a PHP, but you mix control statement with styles. As result your\n   styles is slow, because programming language is too compilcated. With PostCSS\n   you write styles on normal CSS, just with custom at-rules and functions.\n2. Preprocessors tools (like Compass) is written mainly in same\n   preprocessors language. As result this tools is very limited. The libraries\n   adds only a custom functions, variables or mixins. There is no way to add new\n   syntax for CSS 4 polyfills. In PostCSS all magic is written on JS and uses\n   big universe of npm packages. So you have better and smarter tools.\n3. All features is built in this preprocessor’s language. Adding new features\n   is very difficult for developers, so languages develop slow. All features\n   of PostCSS is just a small JS functions, which transform CSS nodes tree.\n   Many developers create new features and you have bigger choice.\n\n## Features\n\n### Modularity\n\nWithout a plugins, PostCSS just parse your CSS and stringify it back without\nchange of any byte. All features is made by small JS funcions\nfrom PostCSS plugins. You can choose only features, that you need.\n\nVariables is a nice example. There are 2 different plugins for variables.\n[postcss-simple-vars] has Sass like syntax:\n\n```css\na {\n    color: $link-color;\n}\n```\n\n[postcss-custom-properties] is a polyfill for [W3C CSS Custom Properties] draft:\n\n```css\na {\n    color: var(--link-color);\n}\n```\n\nIn PostCSS you can choose what variables syntax you want or even take both.\n\n[W3C CSS Custom Properties]: http://www.w3.org/TR/css-variables/\n[postcss-custom-properties]: https://github.com/postcss/postcss-custom-properties\n[postcss-simple-vars]:       https://github.com/postcss/postcss-simple-vars\n\n### Perfomance\n\nPostCSS is one of the fastest CSS parsers written on JS. Only [CSSOM] is 10%\nfaster and only because it parses CSS not so accurate as PostCSS does.\nModular architecture makes PostCSS code is simple and easy to maintain.\n\nAs result PostCSS is incredible fast. PostCSS is written on JS, but even with\nbig [cssnext] plugin pack, it is 4 times faster than [libsass] written on C++.\n\nIf you uses Ruby Sass right now, you will be excited with PostCSS developing\nprocess, because PostCSS is 40 times faster that Ruby Sass.\n\n[cssnext]: https://github.com/cssnext/cssnext\n[libsass]: https://github.com/sass/libsass\n[CSSOM]:   https://github.com/NV/CSSOM\n\n### Powerful Tools\n\nPostCSS plugins can read and rebuild entire CSS node tree.\nAs result PostCSS has many powerful tools that would be impossible\non preprocessors. Autoprefixer is a good example of how PostCSS plugin could\nbe useful.\n\nPostCSS allows you to build linters (like [doiuse] or [BEM Linter]),\ncode review tools (like [list-selectors]) or minifiers (like [CSSWring]).\nWith [postcss-data-packer] plugin you can create a “sprite” from inlined images\nby moving all `data:uri` values to separated file.\n\nBut my favorite example of PostCSS power is [RTLCSS]. As you know Jews and Arabs\nhas right-to-left writing. Because writing affects to people perspective\nyou need to change your site design (check out [Arabic Wikipedia]).\nRTLCSS plugin mirrors you design, replace `left` to `right` in your styles,\nchange values order in `margin`, etc.\n\n[postcss-data-packer]: https://github.com/Ser-Gen/postcss-data-packer\n[Arabic Wikipedia]:    https://ar.wikipedia.org/wiki/%D9%84%D8%BA%D8%A9_%D8%B9%D8%B1%D8%A8%D9%8A%D8%A9\n[list-selectors]:      https://github.com/davidtheclark/list-selectors\n[BEM Linter]:          https://github.com/necolas/postcss-bem-linter\n[CSSWring]:            https://github.com/hail2u/node-csswring\n[doiuse]:              https://github.com/anandthakker/doiuse\n[RTLCSS]:              https://github.com/MohammadYounes/rtlcss\n\n## Quick Start\n\n1. Add PostCSS to your build tool. See [Grunt], [Gulp] and [webpack] plugins\n   for further instructions.\n2. Select plugins from list below and add them to your PostCSS.\n3. Make awesome products.\n\n[webpack]: https://github.com/postcss/postcss-loader\n[Grunt]:   https://github.com/nDmitry/grunt-postcss\n[Gulp]:    https://github.com/w0rm/gulp-postcss\n\n## Plugins Packs\n\n* [cssnext] is a pack of CSS 4 polyfills plugins.\n* [ACSS] contains plugins to control your CSS by special annotation comments.\n\n[cssnext]:  https://github.com/putaindecode/cssnext\n[ACSS]:     https://github.com/morishitter/acss\n\n## Plugins\n\n* [Autoprefixer] adds vendor prefixes to rules by Can I Use.\n* [cssgrace] with helpers and CSS 3 polyfills for IE and other old browsers.\n* [csswring] is a CSS minifier.\n* [rtlcss] mirrors styles for right-to-left locales.\n* [pixrem] is a `rem` unit polyfill.\n* [css-mqpacker] joins same CSS media queries into one rule.\n* [postcss-assets] inlines files and inserts image width and height.\n* [css2modernizr] analyzes your CSS and output only used Modernizr’s settings.\n* [postcss-bem-linter] lints CSS for SUIT CSS methodology.\n* [pleeease-filters] converts WebKit filters to SVG filter for other browsers.\n* [postcss-custom-selectors] to add custom alias for selectors.\n* [doiuse] lints CSS for browser support against Can I Use database.\n* [webpcss] adds links to WebP images for browsers that support it.\n* [postcss-import] inlines `@import` rules content.\n* [postcss-nested] unwraps nested rules.\n* [postcss-media-minmax] adds `<=` and `=>` statements to CSS media queries.\n* [postcss-mixins] to use mixins.\n* [postcss-easings] replaces easing name to `cubic-bezier()`.\n* [postcss-url] rebases or inlines `url()`.\n* [postcss-epub] adds `-epub-` prefix.\n* [postcss-custom-properties] is a polyfill for W3C CSS variables spec.\n* [mq4-hover-shim] is a shim for the `@media (hover: hover)` feature.\n* [postcss-color-palette] transforms CSS 2 color keywords to a custom palette.\n* [postcss-custom-media] to add custom alias for media queries.\n* [css-byebye] removes CSS rules by some criteria.\n* [postcss-simple-vars] adds Sass-style variables support.\n* [postcss-data-packer] moves an inlined data into a separate file.\n* [postcss-color-gray] adds `gray()` function.\n* [postcss-brand-colors] inserts branding colors by companies name.\n* [list-selectors] is a code review tool for your CSS.\n* [postcss-calc] reduce `calc()` with same units.\n* [postcss-font-variant] adds readable front variant properies support.\n* [postcss-simple-extend] adds `@extend` support.\n* [postcss-size] adds `size` shorcut to set width and height in one property.\n* [postcss-color-hex] transforms `rgb()` and `rgba()` to hex.\n* [postcss-host] make `:host` selectors work properly with pseudo-classes.\n* [postcss-color-rebeccapurple] is a `rebeccapurple` color polyfill.\n* [postcss-color-function] adds functions to transform colors.\n* [postcss-color-hex-alpha] adds `#rrggbbaa` and `#rgba` notation support.\n* [postcss-color-hwb] transforms `hwb()` to `rgb()`.\n* [postcss-single-charset] pops first `@charset` rule.\n\n[postcss-color-rebeccapurple]: https://github.com/postcss/postcss-color-rebeccapurple\n[postcss-custom-properties]:   https://github.com/postcss/postcss-custom-properties\n[postcss-custom-selectors]:    https://github.com/postcss/postcss-custom-selectors\n[postcss-color-hex-alpha]:     https://github.com/postcss/postcss-color-hex-alpha\n[postcss-color-function]:      https://github.com/postcss/postcss-color-function\n[postcss-single-charset]:      https://github.com/hail2u/postcss-single-charset\n[postcss-color-palette]:       https://github.com/zaim/postcss-color-palette\n[postcss-simple-extend]:       https://github.com/davidtheclark/postcss-simple-extend\n[postcss-media-minmax]:        https://github.com/postcss/postcss-media-minmax\n[postcss-custom-media]:        https://github.com/postcss/postcss-custom-media\n[postcss-brand-colors]:        https://github.com/postcss/postcss-brand-colors\n[postcss-font-variant]:        https://github.com/postcss/postcss-font-variant\n[postcss-simple-vars]:         https://github.com/postcss/postcss-simple-vars\n[postcss-data-packer]:         https://github.com/Ser-Gen/postcss-data-packer\n[postcss-bem-linter]:          https://github.com/necolas/postcss-bem-linter\n[postcss-color-gray]:          https://github.com/postcss/postcss-color-gray\n[postcss-color-hex]:           https://github.com/TrySound/postcss-color-hex\n[postcss-color-hwb]:           https://github.com/postcss/postcss-color-hwb\n[pleeease-filters]:            https://github.com/iamvdo/pleeease-filters\n[postcss-easings]:             https://github.com/postcss/postcss-easings\n[postcss-assets]:              https://github.com/borodean/postcss-assets\n[postcss-import]:              https://github.com/postcss/postcss-import\n[postcss-nested]:              https://github.com/postcss/postcss-nested\n[postcss-mixins]:              https://github.com/postcss/postcss-mixins\n[mq4-hover-shim]:              https://github.com/twbs/mq4-hover-shim\n[list-selectors]:              https://github.com/davidtheclark/list-selectors\n[css2modernizr]:               https://github.com/vovanbo/css2modernizr\n[Autoprefixer]:                https://github.com/postcss/autoprefixer\n[css-mqpacker]:                https://github.com/hail2u/node-css-mqpacker\n[postcss-epub]:                https://github.com/Rycochet/postcss-epub\n[postcss-calc]:                https://github.com/postcss/postcss-calc\n[postcss-size]:                https://github.com/postcss/postcss-size\n[postcss-host]:                https://github.com/vitkarpov/postcss-host\n[postcss-url]:                 https://github.com/postcss/postcss-url\n[css-byebye]:                  https://github.com/AoDev/css-byebye\n[cssgrace]:                    https://github.com/cssdream/cssgrace\n[csswring]:                    https://github.com/hail2u/node-csswring\n[webpcss]:                     https://github.com/lexich/webpcss\n[rtlcss]:                      https://github.com/MohammadYounes/rtlcss\n[pixrem]:                      https://github.com/robwierzbowski/node-pixrem\n[doiuse]:                      https://github.com/anandthakker/doiuse\n\n## Usage\n\n### JavaScript API\n\n```js\nvar postcss   = require('postcss');\nvar processor = postcss([require('cssnext'), require('cssgrace')]);\n\nvar result = processor.process(css, { from: 'app.css', to: 'app.out.css' });\nconsole.log(result.css);\n```\n\nRead [postcss function], [processor] and [Result] API docs for more details.\n\n[postcss function]: https://github.com/postcss/postcss/blob/master/API.md#postcss-function\n[processor]:        https://github.com/postcss/postcss/blob/master/API.md#postcss-class\n[Result]:           https://github.com/postcss/postcss/blob/master/API.md#result-class\n\n### Source Maps\n\nBy using [source maps], a browser’s development tools can indicate the\noriginal position of your styles before the css file was transformed.\nFor example, an inspector will show the position in a Sass file, even if\nthe file has been compiled to CSS, concatenated, and minified.\n\nTo ensure a correct source map is generated, every CSS processing step should\nupdate the map generated by the previous step. For example, a Sass compiler\nwill generate the first map, a concatenation tool should update the Sass step’s\nmap, and a minifier should update the map generated by the concatenation tool.\n\nThere are two ways to store a source map:\n\n* You can place it in a separate file which contains a special annotation\n  comments pointing to another file:\n\n  ```css\n a { }\n /*# sourceMappingURL=main.out.css.map */\n  ```\n* Or you can inline a base64-encoded source map within a CSS comment:\n\n  ```css\n a { }\n /*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uY3NzIiwic291cmNlcyI6WyJtYWluLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFLIn0= */\n  ```\n\nPostCSS has great source map support. To ensure that you generate the correct\nsource map, you must indicate the input and output CSS files\npaths (using the options `from` and `to` respectively).\n\nTo generate a new source map with the default options, provide `map: true`.\nThis will inline sourcemap with source content. If you don’t want the map\ninlined, you can use `map.inline: false` option.\n\n```js\nvar result = processor.process(css, {\n    from: 'main.css',\n    to:   'main.out.css'\n    map: { inline: false },\n});\n\nresult.map //=> '{\"version\":3,\"file\":\"main.out.css\",\"sources\":[\"main.css\"],\"names\":[],\"mappings\":\"AAAA,KAAI\"}'\n```\n\nIf PostCSS is handling CSS and finds source maps from previous transformations,\nit will automatically update the CSS with the same options.\n\n```js\n// main.sass.css has an annotation comment with a link to main.sass.css.map\nvar result = minifier.process(css, { from: 'main.sass.css', to: 'main.min.css' });\nresult.map //=> Source map from main.sass to main.min.css\n```\n\nIf you want more control over source map generation, you can define the `map`\noption as an object with the following parameters:\n\n* `inline` (boolean): indicates the source map should be inserted into the CSS\n  base64 string as a comment. By default it is `true`. But if all previous map\n  are in separated too, PostCSS will not inline map too.\n\n  If you inline a source map, `result.map` will be empty, as the source map\n  will be contained within the text of `result.css`.\n\n* `prev` (string, object, or boolean): map content from a previous processing\n  step (for example, Sass compilation). PostCSS will try to read the previous\n  source map automatically from the comment within origin CSS, but you can also\n  set manually. If desired, you can omit the previous map with `prev: false`.\n\n  This is a source map option which can be passed to `postcss.parse(css, opts)`.\n  Other options can be passed to the `toResult(opts)` or `process(css, opts)`\n  methods.\n\n* `sourcesContent` (boolean): indicates that we should set the origin content\n  (for example, Sass source) of the source map. By default it is `true`.\n  But if all previous map do not contain sources content,\n  PostCSS will miss it too.\n\n* `annotation` (boolean or string): indicates if we should add annotation\n  comments to the CSS. By default, PostCSS will always add a comment with a path\n  to the source map. But if the previous CSS does not have an annotation\n  comment, PostCSS will omit it too.\n\n  By default, PostCSS presumes that you want to save the source map as\n  `opts.to + '.map'` and will use this path in the annotation comment.\n  But you can set another path by providing a string value as the `annotation`\n  option.\n\n  If you set `inline: true`, annotation cannot be disabled.\n\n[source maps]: http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\n\n### Safe Mode\n\nIf you provide a `safe: true` option to the `process` or `parse` methods,\nPostCSS will try to correct any syntax error that it finds in the CSS.\n\n```js\npostcss.parse('a {');                 // will throw \"Unclosed block\"\npostcss.parse('a {', { safe: true }); // will return CSS root for a {}\n```\n\nThis is useful for legacy code filled with plenty of hacks. Another use case\nis interactive tools with live input, for example,\nthe [Autoprefixer demo](http://jsfiddle.net/simevidas/udyTs/show/light/).\n\n## How to Develop PostCSS Plugin\n\n* [PostCSS API](https://github.com/postcss/postcss/blob/master/API.md)\n* [Plugin Boilerplate](https://github.com/postcss/postcss-plugin-boilerplate)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss/issues"
  },
  "_id": "postcss@4.0.4",
  "dist": {
    "shasum": "a4d26ab33c894602418783f36c2bc8f3de4f3cc3"
  },
  "_from": "postcss@^4.0.0",
  "_resolved": "https://registry.npmjs.org/postcss/-/postcss-4.0.4.tgz"
}
